/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

#include "nsISupports.idl"

interface nsIVariant;

interface sbIMediacore;
interface sbIMediacoreError;
interface sbIMediacoreEventTarget;

/**
 * \interface sbIMediacoreEvent
 * \brief Definition of the sbIMediacoreEvent interface.
 */
[scriptable, uuid(c5f679e0-d695-11df-937b-0800200c9a66)]
interface sbIMediacoreEvent : nsISupports
{
  const unsigned long UNINTIALIZED    = 0x00000000;

  /**
   * \brief Metadata describing current item has changed
   * \note data is an sbIPropertyArray object.
   */
  const unsigned long METADATA_CHANGE = 0x00001000;
  /**
   * \brief URI used for operation has changed
   * \note data is an nsIURI object.
   */
  const unsigned long URI_CHANGE      = 0x00001001;
  /**
   * \brief Current duration has changed
   * \note data is the new duration as an unsigned long long (in milliseconds).
   */
  const unsigned long DURATION_CHANGE = 0x00001002;
  /**
   * \brief Volume has changed
   * \note data is the new volume as a double (from 0 to 1).
   */
  const unsigned long VOLUME_CHANGE   = 0x00001003;
  /**
   * \brief Mute status has changed
   * \note data is the new mute state (boolean, true = muted).
   */
  const unsigned long MUTE_CHANGE     = 0x00001004;

  // Sequencer Events

  /**
   * \brief Before the track playing is changed.
   * \note This event should only be fired by the sequencer.
   * \note data is the new sbIMediaItem that will be played.
   */
  const unsigned long BEFORE_TRACK_CHANGE = 0x00001500;
  /**
   * \brief Track playing has changed.
   * \note This event should only be fired by the sequencer.
   * \note data is the new sbIMediaItem being played.
   */
  const unsigned long TRACK_CHANGE        = 0x00001501;
  /**
   * \brief Index in view of item currently playing has changed.
   * \note This event should only be fired by the sequencer.
   * \note data is the new index (unsigned long).
   */
  const unsigned long TRACK_INDEX_CHANGE  = 0x00001502;
  /**
   * \brief Sequencer view is about to change
   * \note data is the new sbIMediaListView.
   */
  const unsigned long BEFORE_VIEW_CHANGE  = 0x00001503;
  /**
   * \brief Sequencer view changed.
   * \note data is the new sbIMediaListView.
   */
  const unsigned long VIEW_CHANGE         = 0x00001504;
  /**
   * \brief Sequence recalculated.
   * \note This event should only be fired by the sequencer.
   * \note data is the new sequence.
   */
  const unsigned long SEQUENCE_CHANGE     = 0x00001505;
  /**
   * \brief Sequence end.
   *
   * This event will be fired by the sequencer when it runs
   * out of items to play from it's sequence. This event will
   * not be fired when the sequence repeats because of repeat
   * one or repeat all being turned on.
   *
   * \note This event should only be fired by the sequencer.
   * \note data is null for this event.
   */
  const unsigned long SEQUENCE_END        = 0x00001507;

  /**
   * \brief Explicit call to next or previous.
   *
   * Triggered by user or code that is actively attempting to change to the
   * next track. This event is _not_ fired when the sequencer goes to the next
   * track because the previous track has finished playing in its entirety.
   *
   * \note data is null.
   * \note BEFORE_TRACK_CHANGE and TRACK_CHANGE are still fired. You may use
   *       those events to get the next item that will be playing.
   */
  const unsigned long EXPLICIT_TRACK_CHANGE = 0x00001508;

  // End Sequencer Events

  /**
   * \brief Stream found.
   * \note Reserved for later use.
   */
  const unsigned long STREAM_FOUND      = 0x00002000;

  /**
   * \brief Stream has video.
   * \note data is null.
   */
  const unsigned long STREAM_HAS_VIDEO  = 0x00002001;

  /**
   * \brief Buffering.
   * \note data is the buffering progress as a double (from 0 to 1).
   */
  const unsigned long BUFFERING       = 0x00003000;
  /**
   * \brief Buffer underrun, operation is likely to halt.
   * \note This event is likely to be followed by BUFFERING events.
   * \note data is null.
   */
  const unsigned long BUFFER_UNDERRUN = 0x00003001;

  /**
   * \brief Stream is about to start.
   * \note This event is a notification only, and may be dispatched
   *       asynchronously.  By the time the event is received the playback
   *       may have already started.
   * \note data is an empty property bag
   */
  const unsigned long STREAM_BEFORE_START = 0x00004000;
  /**
   * \brief Stream has started.
   * \note data is null.
   */
  const unsigned long STREAM_START        = 0x00004001;
  /**
   * \brief Stream is about to pause.
   * \note This event is a notification only, and may be dispatched
   *       asynchronously.  By the time the event is received playback may
   *       already have paused.
   * \note data is a property bag, containing
   *       PRUint64 "position" - the position of the stream when pause was
   *                             requested.
   *       PRUint64 "duration" - the length of the stream
   *       nsIURI "uri" - the URI that was playing when the pause started
   */
  const unsigned long STREAM_BEFORE_PAUSE = 0x00004002;
  /**
   * \brief Stream is now paused.
   * \note data is null.
   */
  const unsigned long STREAM_PAUSE        = 0x00004003;
  /**
   * \brief End of stream.
   * \note data is null.
   */
  const unsigned long STREAM_END          = 0x00004004;
  /**
   * \brief Stream is about to stop.
   * \note This event is a notification only, and may be dispatched
   *       asynchronously.  By the time the event is received playback may
   *       already have stopped (and therefore querying the playback controller
   *       may result in different values).
   * \note data is a property bag, containing
   *       PRUint64 "position" - the position of the stream when stopping of
   *                             playback was requested.
   *       PRUint64 "duration" - the length of the stream
   *       nsIURI "uri" - the URI that was playing when the stop was requested.
   */
  const unsigned long STREAM_BEFORE_STOP  = 0x00004005;
  /**
   * \brief Stream was stopped.
   * \note data is null.
   */
  const unsigned long STREAM_STOP         = 0x00004006;
  /**
   * \brief Explicit call to stop the playback.
   *
   * Triggered by user or code that is actively attempting to stop the playback.
   * This event is _not_ fired when the sequencer goes to the end and no next
   * track for playback.
   *
   * \note data is null.
   * \note STREAM_BEFORE_STOP and STREAM_STOP are still fired.
   */
  const unsigned long EXPLICIT_STOP       = 0x00004007;

  /**
   * \brief Playback has progressed in an unusual way
   * \note data is a property bag, containing
   *       PRUint64 "position" - the position of the stream after seeking.
   */
  const unsigned long SEEKED          = 0x00001005; 

  // Video specific events

  /**
   * \brief Video size has changed.
   * \note data is an sbIVideoSize object.
   * \see sbIVideoSize
   */
  const unsigned long VIDEO_SIZE_CHANGED = 0x00005000;

  // End video specifc events

  /**
   * \brief Plugin missing for requested format.
   * \note Reserved for later use.
   */
  const unsigned long PLUGIN_MISSING  = 0x00008000;

  /**
   * \brief Custom event base value.
   */
  const unsigned long CUSTOM_EVENT_BASE = 0x40000000;

  /**
   * \brief Indicates the event is an error and will have it's error member set.
   */
  const unsigned long ERROR_EVENT       = 0x80000000;

  /**
   * \brief The event type.
   */
  readonly attribute unsigned long type;
  /**
   * \brief Error member is only set when type of event is set to ERROR.
   */
  readonly attribute sbIMediacoreError error;

  /**
   * \brief The event data. Payload varies per event type.
   */
  readonly attribute nsIVariant data;

  /**
   * \brief Mediacore that generated the event.
   */
  readonly attribute sbIMediacore origin;
  /**
   * \brief Event Target that dispatched the event.
   */
  readonly attribute sbIMediacoreEventTarget target;
};

%{C++

#define SB_MEDIACORE_EVENT_DESCRIPTION    \
  "Songbird Mediacore Event"
#define SB_MEDIACORE_EVENT_CONTRACTID     \
  "@songbirdnest.com/Songbird/Mediacore/event;1"
#define SB_MEDIACORE_EVENT_CLASSNAME      \
  "sbMediacoreEvent"
#define SB_MEDIACORE_EVENT_CID          \
  {0xedf0959d, 0x21bf, 0x411f, {0x8d, 0x3d, 0x85, 0x9a, 0x76, 0xe7, 0x14, 0x12}}

%};
