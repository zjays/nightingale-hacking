/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

#include "nsISupports.idl"

interface nsIArray;
interface nsIURI;

interface sbIMediacore;
interface sbIMediacoreSequence;
interface sbIMediacoreSequenceGenerator;
interface sbIMediaItem;
interface sbIMediaListView;

[scriptable, uuid(ddce2b50-d69d-11df-937b-0800200c9a66)]
interface sbIMediacoreSequencer : nsISupports
{
  /**
   * \brief The mode used to generate the sequence.  Note that it is possible to
   * disable shuffle mode using the playlist.shuffle.disabled DataRemote.  In
   * this case, setting the mode to MODE_SHUFFLE will result in NS_ERROR_FAILURE.
   */
  const unsigned long MODE_FORWARD    = 0;
  const unsigned long MODE_REVERSE    = 1;
  const unsigned long MODE_SHUFFLE    = 1 << 1;

  const unsigned long MODE_CUSTOM     = 1 << 16;

  attribute unsigned long mode;

  /**
   * \brief The repeat mode to use. Note that it is possible to disable
   * repeat mode using the playlist.repeat.disabled DataRemote.  In this case,
   * setting the mode to MODE_REPEAT_ONE or MODE_REPEAT_ALL will result in
   * NS_ERROR_FAILURE. 
   */
  const unsigned long MODE_REPEAT_NONE = 0;
  const unsigned long MODE_REPEAT_ONE  = 1;
  const unsigned long MODE_REPEAT_ALL  = 1 << 1;

  attribute unsigned long repeatMode;

  /**
   * \brief The view that was used to generate the current sequence.
   */
  attribute sbIMediaListView view;

  /**
   * \brief The current position in the view. This position
   *        is tied to the sequencePosition.
   * \throw NS_ERROR_NOT_AVAILABLE when the sequence position is invalid.
   */
  readonly attribute unsigned long viewPosition;

  /**
   * \brief The current item in the view.
   * \note This is the equivalent of calling sbIMediaListView::getItemByIndex
   *       using viewPosition.
   * \note This may be null if there is no currentItem.
   */
  readonly attribute sbIMediaItem currentItem;

  /**
   * \brief The next item in the sequence.
   * \note This is equivalent to getting the current sequence and asking it
   *       for sequencePosition + 1.
   * \note This may be null if there is no next item.
   */
  readonly attribute sbIMediaItem nextItem;

  /**
   * \brief The current sequence. It contains the indexes of the songs in the
   *        current sequence in the view.
   * \note  The value of viewPosition should be at the index of sequencePosition.
   */
  readonly attribute nsIArray currentSequence;

  /**
   * \brief The current position in the sequence. This position is tied
   *        to the viewPosition.
   * \throw NS_ERROR_NOT_AVAILABLE when the sequence position is invalid.
   */
  attribute unsigned long sequencePosition;

  /**
   * \brief Play a media list view as a sequence. Optionally provide the index
   *        of the item in the view that should play first in the sequence.
   * \param aView The view you wish to play.
   * \param aItemIndex The index of the item inside the view to play first.
   *                   You may pass sbIMediacoreSequencer::AUTO_PICK_INDEX if
   *                   you wish to have the sequencer pick the most appropriate
   *                   start index for the sequence.
   * \param aNotFromUserAction False if this call is the result of a user
   *                           interface action, true if code is calling
   *                           playView on its own (optional, defaults to
   *                           false, which may trigger further user interaction).
   * \see AUTO_PICK_INDEX
   */
  void playView(in sbIMediaListView aView,
                [optional] in long long aItemIndex,
                [optional] in boolean aNotFromUserAction);

  /**
   * \brief Allow the sequencer to pick the most appropriate start index for a
   *        sequence.
   *
   * The sequencer will pick a random index for the start of the sequence
   * if shuffle is enabled. If shuffle is disabled, the sequencer will pick
   * the first available index: 0.
   *
   * \see playView
   */
  const long AUTO_PICK_INDEX = -1;

  /**
   * \brief Play a single URL as a sequence.
   */
  void playURL(in nsIURI aURI);

  /**
   * \brief Play the sequence.
   */
  void play();

  /**
   * \brief Stop the sequence.
   * \param aNotFromUserAction False if this call is the result of a user
   *                           interface action, true if code is calling
   *                           stop on its own (optional, defaults to
   *                           false so UI stop is from user
   */
  void stop([optional] in boolean aNotFromUserAction);

  /**
   * \brief Go to the next item in the sequence.
   * \param aNotFromUserAction False if this call is the result of a user
   *                           interface action, true if code is calling
   *                           next on its own (optional, defaults to
   *                           false, which may trigger further user interaction).
   */
  void next([optional] in boolean aNotFromUserAction);

  /**
   * \brief Go to the previous item in the sequence.
   * \param aNotFromUserAction False if this call is the result of a user
   *                           interface action, true if code is calling
   *                           previous on its own (optional, defaults to
   *                           false, which may trigger further user interaction).
   */
  void previous([optional] in boolean aNotFromUserAction);

  /**
   * \brief Indicate that the current core will handle the next item in the
   *        sequence when the stream ends.
   */
  void requestHandleNextItem(in sbIMediacore aMediacore);

  /**
   * \brief Abort the current item playback attempt.
   * \note This method may only be called from BEFORE_TRACK_CHANGE. If
   *       you attempt to call it from another context, it will silently
   *       fail.
   */
  void abort();

  // When in custom mode, this generator is used to generate the sequence.
  attribute sbIMediacoreSequenceGenerator customGenerator;
};
