/*
//
// BEGIN NIGHTINGALE GPL
//
// This file is part of the Nightingale web player.
//
// http://getnightingale.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END NIGHTINGALE GPL
//
*/

#include "nsISupports.idl"

interface nsIArray;
interface ngIEqualizerPreset;

/**
 * \interface ngIEqualizerPresetProvider
 * \brief Provides a set of immutable presets.
 * \note Should be implemented as service.
 */
[scriptable, uuid(cfb2690d-659c-462a-ac8f-c4eef7c536de)]
interface ngIEqualizerPresetProvider : nsISupports
{
    /**
     * \brief Array of presets. Each element should implement ngIEqualizerPreset.
     */
    readonly attribute nsIArray presets;
};


/**
 * \interface ngIEqualizerPresetCollection
 * \brief Specific accessors to preset collections
 * \note This interface is mainly here for pleasure, as you could do all of
 *       the actions it provides based of an nsIArray. Those methods might be
 *       better optimized though.
 */
[scriptable, uuid(ed4cde10-746d-4cc9-9da4-7421543f711f)]
interface ngIEqualizerPresetCollection : nsISupports
{
    /**
     * \brief Returns the preset in the collection with the given name.
     * \note Returns null when there is no preset with this name.
     */
    ngIEqualizerPreset getPresetByName(in AString aName);

    /**
     * \brief Returns wether the collection contains a preset with this name.
     */
    PRBool hasPresetNamed(in AString aName);
};

/**
 * \interface ngIMainEqualizerPresetProvider
 * \brief Main provider, used to store user defined presets.
 * \note Emits "equalizer-preset-saved" and "equalizer-preset-deleted" observer 
 *       notifications.
 * \note Is a service.
 */
[scriptable, uuid(24e07f0f-8715-4768-a2fc-6ef171f4aabd)]
interface ngIMainEqualizerPresetProvider : ngIEqualizerPresetProvider
{
    /**
     * \brief Delete the user set preset with the given name
     * \note Observers of the topic "equalizer-preset-deleted" are notified
     *       after the preset has been deleted.
     * \throw NS_ERROR_ILLEGAL_VALUE if the preset name has no contents (is an
     *        empty string).
     */
    void deletePreset(in AString aName);

    /**
     * \brief Save a preset with the given name and values into the users
     *        profile.
     * \note Observers of the topic "equalizer-preset-saved" are notified after
     *       the preset has been saved with the service as subject and the name
     *       as data.
     * \note This should not be used to add presets to the list unless importing,
     *       rather create an ngIEqualizerPresetProvider to add presets.
     * \throw NS_ERROR_ILLEGAL_VALUE if the supplied array does not have the 
     *        same length as the equalizer has bands.
     * \throw NS_ERROR_ILLEGAL_VALUE if the preset name has no contents (is an
     *        empty string).
     */
    void savePreset(in AString aName, in nsIArray aValues);
};

%{C++
#define NG_EQUALIZER_PRESET_SAVE_TOPIC "equalizer-preset-saved"
#define NG_EQUALIZER_PRESET_DELETE_TOPIC "equalizer-preset-deleted"
%}

/**
 * \interface ngIEqualizerPresetProviderManager
 * \brief The manager collects all preset providers and provides a collection
 *        of them.
 * \note Is a service.
 * \note Emits "equalizer-presets-changed" when the presets list changes.
 *       Subject is the new list and no data is supplied.
 */
[scriptable, uuid(28fd6696-89ac-4895-8a62-27039473d98d)]
interface ngIEqualizerPresetProviderManager : nsISupports
{
    /**
     * \brief Array of ngIEqualizerPresetProvider elements.
     * \note The main provider is always the first item and the Nightingale
     *        default preset provider is always the last item.
     */
    readonly attribute nsIArray providers;

    /**
     * \brief Array containing all presets.
     * \note If multiple providers provide a preset with the same name, the
     *       provider that registered last will override the other ones.
     *       A user-saved preset will always override the other presets (as if
     *       the main provider was registered last).
     *       Please use unique names for presets if you want a constant user
     *       experience.
     */
    readonly attribute nsIArray presets;

    /**
     * \brief Add a ngIEqualizerPresetProvider to the collection.
     */
    void registerPresetProvider(in ngIEqualizerPresetProvider aNewProvider);

    /**
     * \brief Remove an ngIEqualizerPresetProvider from the list.
     * \note You cannot remove the default preset provider and the main provider.
     */
    void unregisterPresetProvider(in ngIEqualizerPresetProvider aProvider);
};

%{C++
#define NG_EQUALIZER_PRESETS_CHANGED_TOPIC "equalizer-presets-changed"
%}