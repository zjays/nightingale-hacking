#filter substitution

if (typeof(Cc) == 'undefined')
  this.Cc = Components.classes;
if (typeof(Ci) == 'undefined')
  this.Ci = Components.interfaces;
if (typeof(Cr) == 'undefined')
  this.Cr = Components.results;
if (typeof(Cu) == 'undefined')
  this.Cu = Components.utils;

Cu.import("resource://gre/modules/XPCOMUtils.jsm");
Cu.import("resource://app/jsmodules/sbLibraryUtils.jsm");
Cu.import("resource://app/jsmodules/sbProperties.jsm");
Cu.import("resource://app/jsmodules/sbSmartMediaListColumnSpecUpdater.jsm");

#ifdef METRICS_ENABLED
if (typeof(gMetrics) == "undefined") {
  this.gMetrics = Cc["@songbirdnest.com/Songbird/Metrics;1"]
      .createInstance(Ci.sbIMetrics);
}
#endif

function debugLog(funcName, str) {
  var debug = Application.prefs.getValue("extensions.concerts.debug", false);
  if (debug) {
    dump("*** Concerts/main.js::" + funcName + " // " + str + "\n");
  }
}

var Concerts = {
  // Reference to the On Tour status icon
  _onTourIcon : null,
  lastConcertCount : 0,
  touringPlaylist : null,

  newMediaCore: true,
  mediaCore: null,

  QueryInterface : XPCOMUtils.generateQI([Ci.sbISongkickConcertCountCallback,
                                          Ci.nsIObserver]),

  onLoad: function() {
    // Initialization code
    this._initialized = true;
    this._strings = document.getElementById("concerts-strings");

    if (typeof(Ci.sbIMediacoreManager) != "undefined") {
      this.newMediaCore = true;
      this.mediaCore = Cc["@songbirdnest.com/Songbird/Mediacore/Manager;1"]
        .getService(Ci.sbIMediacoreManager);
    } else {
      this.newMediaCore = false;
      this.mediaCore = Cc['@songbirdnest.com/Songbird/PlaylistPlayback;1']
        .getService(Ci.sbIPlaylistPlayback);
    }

    // Instantiate the Songkick XPCOM service
    this.skSvc = Cc["@songbirdnest.com/Songbird/Concerts/Songkick;1"]
      .getService(Ci.sbISongkick);
  
    Cc["@mozilla.org/observer-service;1"]
      .getService(Ci.nsIObserverService)
      .addObserver(this, "final-ui-startup", false);
      
    var self = this;
    setTimeout(function() {
      // Wait until the On Tour properties are registered
      self._blockAndFinishLoad();
    }, 1000);
  },

  _blockAndFinishLoad: function _blockAndFinishLoad() {
    if (!Components.classes
        ["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
        .getService(Ci.sbIPropertyManager)
        .hasProperty(this.skSvc.onTourUrlProperty))
    {
      debugLog("_blockAndFinishLoad", "Waiting for property init..");
      setTimeout(_blockAndFinishLoad, 100);
    } else {
      debugLog("_blockAndFinishLoad", "On Tour properties exist!");
      // Add the service pane node
      this._setupServicePaneNode();

      // Register the concert count updater with the service
      this.updateConcertCount.wrappedJSObject = this.updateConcertCount;
      this.skSvc.registerSPSUpdater(this.updateConcertCount);

      // Save our property strings
      this.onTourImgProperty = this.skSvc.onTourImgProperty;
      this.onTourUrlProperty = this.skSvc.onTourUrlProperty;

      // Add the artist dataremote listener
      // This is what handles the OnTour status icon in the faceplate
      this._setupArtistDataRemote();

      // Startup a thread to refresh concert data
      this.skSvc.startRefreshThread();

      // Load location information
      this.skSvc.refreshLocations();
      
      // Add the Artists on Tour playlist
      this._getOnTourPlaylist();
      this.rebuildOnTourPlaylist();

      // Add our mediacore listener to listen for Artists on Tour plays
      // works for both old & new API since this.mediaCore is aliased to gPPS
      // and both gPPS & the new media core manager have the same
      // addListener interface
      this.mediaCore.addListener(this._mmListener);
   
      // Add the listener for playlist "On Tour" clicks
      if ((typeof(gBrowser) != "undefined") && gBrowser) {
        gBrowser.addEventListener("PlaylistCellClick", function(e) {
          return Concerts.playlistCellClick(e);
        }, false);
      }

      // Register our uninstall handler
      this.uninstallObserver.register();
      if (this.touringPlaylist != null)
        this.uninstallObserver.list = this.touringPlaylist;
    }
  },
  
  onUnLoad: function() {
    Concerts._initialized = false;
    var skSvc = Cc["@songbirdnest.com/Songbird/Concerts/Songkick;1"]
      .getService(Ci.sbISongkick);
    skSvc.unregisterSPSUpdater();
    if (Concerts._artistDataRemote)
      Concerts._artistDataRemote.unbind();
    this.mediaCore.removeListener(this._mmListener);
  },
  
  /***********************************************************************
   * Setup the service pane entry point node
   **********************************************************************/
  _setupServicePaneNode : function() {
    var SB_NS = 'http://songbirdnest.com/data/1.0#';
    var SP_NS = 'http://songbirdnest.com/rdf/servicepane#';

    var SPS = Cc["@songbirdnest.com/servicepane/service;1"]
                .getService(Ci.sbIServicePaneService);

    // Check whether the node already exists
    if (SPS.getNode("urn:concerts"))
      return;
    
    var servicesNode = SPS.getNode("SB:Services");
    if (servicesNode) {
      servicesNode.hidden = false;
    } else {
      // No services node found, create one
      servicesNode = SPS.createNode();
      servicesNode.id = "SB:Services";
      servicesNode.className = 'folder services';
      servicesNode.name = SBString("servicesource.services");
      servicesNode.editable = false;
      servicesNode.setAttributeNS(SB_NS, "servicesFolder", 1);
      servicesNode.setAttributeNS(SP_NS, "Weight", 1);
      SPS.root.appendChild(servicesNode);
    }

    // Create concerts node
    var concertsNode = SPS.createNode();
    concertsNode.id = "urn:concerts";
    concertsNode.url = "chrome://concerts/content/browse.xul";
    concertsNode.name = "&servicePane.Name";
    concertsNode.tooltip = "&servicePane.Tooltip";
    concertsNode.stringbundle = "chrome://concerts/locale/overlay.properties";
    concertsNode.editable = false;
    concertsNode.className = "concerts";
    concertsNode.setAttributeNS(SP_NS, "addonID", "@EXTENSION_UUID@");
    concertsNode.image = 'chrome://concerts/content/songkick-16x16.png';
    servicesNode.appendChild(concertsNode);

    // may need to reset the name post-localisation
    this.updateConcertCount();
  },

  updateConcertCount : function(num) {
    var concertCount;
    var skSvc = Cc["@songbirdnest.com/Songbird/Concerts/Songkick;1"]
      .getService(Ci.sbISongkick);
    
    var filter = Application.prefs.getValue(
        "extensions.concerts.filterLibraryArtists", true);
    if (typeof(num) == "undefined") {
      concertCount = skSvc.getConcertCount(filter, Concerts);
    } else {
      // A explicit value was passed in, update the node now.
      concertCount = num;
      Concerts.onConcertCountEnd(concertCount);
    }
  },

  /***********************************************************************
   * Callback for when the concert count updates
   **********************************************************************/
  onConcertCountEnd : function(aConcertCount) {
    // Only update if the count has changed
    if (this.lastConcertCount == aConcertCount)
      return;
    this.lastConcertCount = aConcertCount;

    var SPS = Cc["@songbirdnest.com/servicepane/service;1"]
                .getService(Ci.sbIServicePaneService);
    var concertsNode = SPS.getNode("urn:concerts");
    if (concertsNode) {
      Cu.import("resource://app/jsmodules/ServicePaneHelper.jsm");
      let badge = ServicePaneHelper.getBadge(concertsNode, "concertCount");
      badge.label = aConcertCount;
      badge.visible = true;
    }
  },

  /***********************************************************************
   * Routines for handling displaying the "On Tour" status icon in the
   * faceplate, and handling the user clicking on it.
   **********************************************************************/
  // Setup the artist dataremote and the "On Tour" status icon itself
  _setupArtistDataRemote : function() {
    // If we're in the miniplayer, then don't attach
    if ((typeof(gBrowser) == "undefined") || !gBrowser)
      return;

    // Add the "On Tour" status 
    var artistBox;
    // gonzo faceplate rulez
    artistBox = document.getElementById("faceplate-tool-bar");
    // XXX rubberducky faceplate droolz
    if (artistBox == null)
      artistBox = document.getElementById("sb-faceplate-artist-box");
    // XXX anything else is pure shite
    if (artistBox == null)
      return;

    this._onTourIcon = document.createElement('image');
    this._onTourIcon.setAttribute("id", "faceplate-artist-on-tour-icon");
    this._onTourIcon.setAttribute("flex", "0");
    this._onTourIcon.setAttribute("src",
         "chrome://concerts/skin/faceplate-icon-ticket.png");
    this._onTourIcon.setAttribute("onmousedown",
         "Concerts.loadArtist(event)");
    this._onTourIcon.setAttribute("mousethrough", "never");
    debugLog("setupArtistDataRemote", "Added click handler for faceplate");
    this._onTourIcon.style.visibility = "collapse";
    artistBox.insertBefore(this._onTourIcon, artistBox.firstChild);

    // Add the dataremote listener itself
    var createDataRemote = new Components.Constructor(
        "@songbirdnest.com/Songbird/DataRemote;1",
        Ci.sbIDataRemote, "init");
    Concerts._artistDataRemote = createDataRemote("metadata.artist", null);
    Concerts._artistDataRemote.bindObserver(this, true);

    // See if we're already playing (to catch the feather/layout switch)
    var currentItem;
    var playing = false;
    if (this.newMediaCore && (
      this.mediaCore.status.state == Ci.sbIMediacoreStatus.STATUS_PLAYING ||
      this.mediaCore.status.state == Ci.sbIMediacoreStatus.STATUS_BUFFERING ||
      this.mediaCore.status.state == Ci.sbIMediacoreStatus.STATUS_PAUSED))
    {
      playing = true;
      currentItem = this.mediaCore.sequencer.view.getItemByIndex(
        this.mediaCore.sequencer.viewPosition);
    } else if (!this.newMediaCore && this.mediaCore.playing) {
      playing = true;
      currentItem = this.mediaCore.playingView.mediaList
          .getItemByGuid(this.mediaCore.currentGUID);
    }

    if (playing && currentItem.getProperty(this.onTourImgProperty) != ""
        && currentItem.getProperty(this.onTourImgProperty) != null)
    {
      this._onTourIcon.style.visibility = "visible";
    }
  },
  
  // Our observer, we only use it for observing metadata.artist changes
  observe : function(aSubject, aTopic, aData) {
    if (aTopic == "metadata.artist" && aData != "") {
      var mainWin = Cc["@mozilla.org/appshell/window-mediator;1"]
          .getService(Ci.nsIWindowMediator)
          .getMostRecentWindow("Songbird:Main").window;
      var onTour = this.skSvc.getTourStatus(aData);
      if (onTour)
        this._onTourIcon.style.visibility = "visible";
      else
        this._onTourIcon.style.visibility = "collapse";
    }
    else if (aTopic == "final-ui-startup") {
      Cc["@mozilla.org/observer-service;1"]
        .getService(Ci.nsIObserverService)
        .removeObserver(this, "final-ui-startup");
    }
  },

  // The action that gets invoked when the user clicks on the On Tour icon
  loadArtist : function(e) {
    // Prevent the highlight-current-item action from firing
    e.stopPropagation();

#ifdef METRICS_ENABLED
    gMetrics.metricsInc("concerts", "faceplate.link", "");
#endif
    // Load the artist event page into a new tab
    var item;
    if (Concerts.newMediaCore)
      item = Concerts.mediaCore.sequencer.view.getItemByIndex(
        Concerts.mediaCore.sequencer.viewPosition);
    else
      item = Concerts.mediaCore.playingView.mediaList.getItemByGuid(
        Concerts.mediaCore.currentGUID);
    var city = Application.prefs.getValue("extensions.concerts.city", 0);

    var url = item.getProperty(this.onTourUrlProperty);
    if (!url) {
      // if the track lacks an on tour property, then it's possible
      // it's from the web playlist.  we can make a best guess
      url = Concerts.skSvc
        .getArtistOnTourUrl(item.getProperty(SBProperties.artistName));
    }
    url += "?user_location=" + city;
    if ((typeof(gBrowser) != "undefined") && gBrowser) {
      // If we're in the main player, then open a tab
      gBrowser.loadOneTab(url);
    } else {
      // Otherwise open in the default browser
      SBOpenURLInDefaultBrowser(url);
    }
  },

  /***********************************************************************
   * Called when the user clicks the On Tour icon in the library/playlist
   **********************************************************************/
  playlistCellClick : function(e) {
    var prop = e.getData("property");
    var item = e.getData("item");
    var skSvc = Cc["@songbirdnest.com/Songbird/Concerts/Songkick;1"]
                  .getService(Ci.sbISongkick);
    if (prop == skSvc.onTourImgProperty &&
        item.getProperty(prop) != "")
    {
      var url = item.getProperty(skSvc.onTourUrlProperty);
      var city =
        Application.prefs.getValue("extensions.concerts.city", 0);
      url += "?user_location=" + city;
#ifdef METRICS_ENABLED
      gMetrics.metricsInc("concerts", "library.link", "");
#endif
      gBrowser.loadOneTab(url);
    }
    e.stopPropagation();
  },

  /***********************************************************************
   * Create the smart playlist for tracks by artists touring
   **********************************************************************/
  _getOnTourPlaylist : function() {
    if (this.touringPlaylist != null)
      return this.touringPlaylist;

    try {
      var itemEnum = LibraryUtils.mainLibrary.getItemsByProperty(
          SBProperties.customType,
          "concerts_artistsTouring").enumerate();
      while (itemEnum.hasMoreElements()) {
        debugLog("_getOnTourPlaylist", "Smart playlist found");
        var list = itemEnum.getNext();
        this.touringPlaylist = list;
        return list;
      }
    } catch (e if e.result == Cr.NS_ERROR_NOT_AVAILABLE) {
    }
    
    debugLog("_getOnTourPlaylist", "No smart playlist found");
    return null;
  },

  rebuildOnTourPlaylist : function() {
    if (this.touringPlaylist != null) {
      debugLog("rebuildOnTourPlaylist", "Smart playlist rebuilt");
      this.touringPlaylist.rebuild();
    } else {
      debugLog("rebuildOnTourPlaylist", "Smart playlist is undefined");
    }
  },

  _setupOnTourPlaylist : function() {
    // See if we already have a playlist first
    var pls = this._getOnTourPlaylist();
    if (pls != null)
      return;

    // Now create our smart playlist
    var propMgr =
      Cc["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
      .getService(Ci.sbIPropertyManager);
    var tourPI = propMgr.getPropertyInfo(this.onTourImgProperty);
    var op = tourPI.getOperator(tourPI.OPERATOR_ISSET);
    
    var list = LibraryUtils.mainLibrary.createMediaList("smart");
    list.matchType = Ci.sbILocalDatabaseSmartMediaList.MATCH_TYPE_ALL;
    list.limitType = Ci.sbILocalDatabaseSmartMediaList.LIMIT_TYPE_NONE;
    list.limit = 0;
    list.name = this._strings.getString("playlistName");
    list.appendCondition(this.onTourImgProperty, op, null, null, null);
    list.setProperty(SBProperties.customType, "concerts_artistsTouring");
    list.setProperty(SBProperties.hidden, "0");
    list.autoUpdate = true;
    debugLog("_setupOnTourPlaylist", "List properties set");
    SmartMediaListColumnSpecUpdater.update(list);
    debugLog("_setupOnTourPlaylist", "List colspec updated");
    this.touringPlaylist = list;
    debugLog("_setupOnTourPlaylist", "Smart playlist created");

    this.uninstallObserver.list = list;
  },

  /*********************************************************************
   * Setup listener for view changes so we can track the # of times the
   * Artists on Tour smart playlist is played
   *********************************************************************/
  _mmListener: {
    onMediacoreEvent : function(ev) {
      switch (ev.type) {
        case Components.interfaces.sbIMediacoreEvent.VIEW_CHANGE:
          this.onViewChange(ev.data);
          break;
        default:
          break;
      }
    },
    onStop : function() { },
    onBeforeTrackChange : function() { },
    onTrackChange : function() { },
    onTrackIndexChange : function() { },
    onBeforeViewChange : function() { },
    onViewChange : function(aView) {
      debugLog("viewChangeListener", "on view change triggered");
      var touringPlaylist = null;
      try {
        var itemEnum = LibraryUtils.mainLibrary.getItemsByProperty(
            SBProperties.customType,
            "concerts_artistsTouring").enumerate();
        while (itemEnum.hasMoreElements()) {
          touringPlaylist = itemEnum.getNext();
          break;
        }
      } catch (e if e.result == Cr.NS_ERROR_NOT_AVAILABLE) {
      }

      if (touringPlaylist == null)
        return;

      if (aView.mediaList.getProperty(SBProperties.outerGUID)
        == touringPlaylist.guid)
      {
        debugLog("viewChangeListener",
          "Artists on tour playback initiated");
#ifdef METRICS_ENABLED
        gMetrics.metricsInc("concerts", "smartpls.played", "");
#endif
      }
    }
  },
}

Concerts.uninstallObserver = {
  _uninstall : false,
  list : null,
  
  observe : function(subject, topic, data) {
    switch(topic) {
      case "em-action-requested":
        // Extension has been flagged to be uninstalled
        subject.QueryInterface(Ci.nsIUpdateItem);

        if (subject.id == "@EXTENSION_UUID@") {
          if (data == "item-uninstalled") {
            this._uninstall = true;
          } else if (data == "item-cancel-action") {
            this._uninstall = false;
          }
        }
        break;
      case "songbird-library-manager-before-shutdown":
        //debugLog("observe", "About to fire cleanupPlaylists()");
        if (this._uninstall) {
          this.cleanupPlaylists(data);
        }
        break;
      case "quit-application-granted":
        if (this._uninstall)
          this.uninstallCleanup();
        break;
    }
  },

  register : function() {
    var observerService = Cc["@mozilla.org/observer-service;1"]
      .getService(Ci.nsIObserverService);
    observerService.addObserver(this, "em-action-requested", false);
    observerService.addObserver(this, "quit-application-granted", false);
    observerService.addObserver(this,
        "songbird-library-manager-before-shutdown", false);
    this.observerService = observerService;

    // Save a pointer to the main library
    this.mainLib = Cc['@songbirdnest.com/Songbird/library/Manager;1']
      .getService(Ci.sbILibraryManager).mainLibrary;
  },

  unregister : function() {
    this.observerService.removeObserver(this, "em-action-requested");
    this.observerService.removeObserver(this, "quit-application-granted");
  },

  cleanupPlaylists : function(libraryManager) {
    this.observerService.removeObserver(this,
        "songbird-library-manager-before-shutdown");
    // 3) Remove the Artists On Tour smart playlist
    if (this.list != null)
      this.mainLib.remove(this.list);
  },
  
  uninstallCleanup : function() {
    // Cleanup after ourselves
    // We need to do a few things:
    // 1) Remove Concert prefs
    // 2) Remove "On Tour" property from library if it's visible

#ifdef METRICS_ENABLED
    // Keep a count of when it was uninstalled
    gMetrics.metricsInc("concerts", "uninstall", "");
#endif
    // 1) Remove Concert prefs
    var prefs = Cc["@mozilla.org/preferences-service;1"]
      .getService(Ci.nsIPrefService).getBranch("extensions.concerts.");
    if (prefs.prefHasUserValue("showplaylink"))
      prefs.clearUserPref("showplaylink");
    if (prefs.prefHasUserValue("showgcal"))
      prefs.clearUserPref("showgcal");
    if (prefs.prefHasUserValue("epic"))
      prefs.clearUserPref("epic");
    if (prefs.prefHasUserValue("lastupdated"))
      prefs.clearUserPref("lastupdated");
    if (prefs.prefHasUserValue("forcerefresh"))
      prefs.clearUserPref("forcerefresh");
    if (prefs.prefHasUserValue("citypage"))
      prefs.clearUserPref("citypage");
    if (prefs.prefHasUserValue("locations.lastupdated"))
      prefs.clearUserPref("locations.lastupdated");
    if (prefs.prefHasUserValue("locations.forcerefresh"))
      prefs.clearUserPref("locations.forcerefresh");
    prefs.deleteBranch("");
    
    // 2) Remove "On Tour" property from library colspec
    var skSvc = Cc["@songbirdnest.com/Songbird/Concerts/Songkick;1"]
      .getService(Ci.sbISongkick);
    var mainLib = Cc['@songbirdnest.com/Songbird/library/Manager;1']
      .getService(Ci.sbILibraryManager).mainLibrary;
    var colSpec = mainLib.getProperty(SBProperties.columnSpec);
    var propRe = new RegExp("\\s+"+skSvc.onTourImgProperty+" \\d+","g");
    if (colSpec.indexOf(skSvc.onTourImgProperty)) {
      colSpec = colSpec.replace(propRe, "");
      mainLib.setProperty(SBProperties.columnSpec, colSpec);
    }
    var colSpec = mainLib.getProperty(SBProperties.defaultColumnSpec);
    if (colSpec.indexOf(skSvc.onTourImgProperty)) {
      colSpec = colSpec.replace(propRe, "");
      mainLib.setProperty(SBProperties.defaultColumnSpec, colSpec);
    }
  },
}

window.addEventListener("load", function(e) { Concerts.onLoad(e); }, false);
window.addEventListener("unload", function(e) { Concerts.onUnLoad(e); }, false);
