/*
 *
 *=BEGIN SONGBIRD LICENSE
 *
 * Copyright(c) 2009-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * For information about the licensing and copyright of this Add-On please
 * contact POTI, Inc. at customer@songbirdnest.com.
 *
 *=END SONGBIRD LICENSE
 *
 */

#filter substitution

if (typeof(Cc) == 'undefined')
  var Cc = Components.classes;
if (typeof(Ci) == 'undefined')
  var Ci = Components.interfaces;
if (typeof(Cr) == 'undefined')
  var Cr = Components.results;

if (typeof(SBProperties) == "undefined") {
  Cu.import("resource://app/jsmodules/sbProperties.jsm");
  if (!SBProperties)
    throw new Error("Import of sbProperties module failed");
}

if (typeof(LibraryUtils) == "undefined") {
  Cu.import("resource://app/jsmodules/sbLibraryUtils.jsm");
  if (!LibraryUtils)
    throw new Error("Import of sbLibraryUtils module failed");
}

if (typeof(SmartMediaListColumnSpecUpdater) == "undefined") {
  Cu.import("resource://app/jsmodules/sbSmartMediaListColumnSpecUpdater.jsm");
  if (!SmartMediaListColumnSpecUpdater)
    throw new Error("Import of sbSmartMediaList module failed");
}

var gMediaCore;

if (typeof(gBrowser) == "undefined")
  var gBrowser = Cc["@mozilla.org/appshell/window-mediator;1"]
                   .getService(Ci.nsIWindowMediator)
                   .getMostRecentWindow("Songbird:Main").window.gBrowser;

#ifdef METRICS_ENABLED
if (typeof(gMetrics) == "undefined")
  var gMetrics = Cc["@songbirdnest.com/Songbird/Metrics;1"]
                   .createInstance(Ci.sbIMetrics);
#endif

function debugLog(funcName, str) {
  var debug = Application.prefs.getValue("extensions.newreleases.debug", false);
  if (debug) {
    dump("*** NewReleases/main.js::" + funcName + " // " + str + "\n");
  }
}

if (typeof NewReleases == 'undefined') {
  var NewReleases = {};
}

//FIX:
//- songkick.ico

NewReleases = {
  // Reference to the new release status icon
  _newReleaseIcon : null,
  lastReleasesCount : 0,
  releasePlaylist : null,

  onLoad: function() {
    // Initialization code
    this._initialized = true;
    this._strings = document.getElementById("newReleases-strings");

    if (typeof(Ci.sbIMediacoreManager) != "undefined") {
      this.newMediaCore = true;
      gMediaCore = Cc["@songbirdnest.com/Songbird/Mediacore/Manager;1"]
                     .getService(Ci.sbIMediacoreManager);
    } else {
      this.newMediaCore = false;
      gMediaCore = Cc['@songbirdnest.com/Songbird/PlaylistPlayback;1']
                     .getService(Ci.sbIPlaylistPlayback);
    }

    // Instantiate the New Releases XPCOM service
    this.nrSvc = Cc["@songbirdnest.com/newreleases;1"]
      .getService(Ci.nsIClassInfo).wrappedJSObject;
  
    // Wait until the New Release properties are registered
    this._blockAndFinishLoad();
  },

  _blockAndFinishLoad: function _blockAndFinishLoad() {
    if (!Cc["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
           .getService(Ci.sbIPropertyManager)
           .hasProperty(this.nrSvc.newReleaseUrlProperty))
    {
      debugLog("_blockAndFinishLoad", "Waiting for property init..");
      setTimeout(_blockAndFinishLoad, 100);
    } else {
      debugLog("_blockAndFinishLoad", "New Release properties exist!");
      // Add the service pane node
      this._setupServicePaneNode();

      // Register the releases count updater with the service
      this.updateNewReleasesCount.wrappedJSObject = this.updateNewReleasesCount;
      this.nrSvc.registerSPSUpdater(this.updateNewReleasesCount);

      // Save our property strings
      this.newReleaseImgProperty = this.nrSvc.newReleaseImgProperty;
      this.newReleaseUrlProperty = this.nrSvc.newReleaseUrlProperty;

      // Add the artist dataremote listener
      // This is what handles the New Release status icon in the faceplate
      this._setupArtistDataRemote();

      // Startup a thread to refresh releases data
      this.nrSvc.startRefreshThread();

      // Add the Artists new Release playlist
      this._getNewReleasePlaylist();
      this.rebuildNewReleasePlaylist();

      // Add our mediacore listener to listen for Artists new Release plays
      // works for both old & new API since gMediaCore is aliased to gPPS
      // and both gPPS & the new media core manager have the same
      // addListener interface
      gMediaCore.addListener(this._mmListener);

      // Add the listener for playlist "New Release" clicks
      if (typeof(gBrowser) != "undefined")
        gBrowser.addEventListener("PlaylistCellClick", function(e) {
          return NewReleases.playlistCellClick(e);
        }, false);

      // Register our uninstall handler
      this.uninstallObserver.register();
      if (this.releasePlaylist != null)
        this.uninstallObserver.list = this.releasePlaylist;
    }
  },

  onUnLoad: function() {
    NewReleases._initialized = false;
    var nrSvc = Cc["@songbirdnest.com/newreleases;1"]
                  .getService(Ci.nsIClassInfo).wrappedJSObject;
    nrSvc.unregisterSPSUpdater();
    if (NewReleases._artistDataRemote)
      NewReleases._artistDataRemote.unbind();
    gMediaCore.removeListener(this._mmListener);
  },

  /***********************************************************************
   * Setup the service pane entry point node
   **********************************************************************/
  _setupServicePaneNode : function() {
    var SB_NS = 'http://songbirdnest.com/data/1.0#';
    var SP_NS = 'http://songbirdnest.com/rdf/servicepane#';

    var SPS = Cc["@songbirdnest.com/servicepane/service;1"]
                .getService(Ci.sbIServicePaneService);

    // Check whether the node already exists
    if (SPS.getNode("urn:newreleases"))
      return;

    var servicesNode = SPS.getNode("SB:Services");
    if (servicesNode) {
      servicesNode.hidden = false;
    } else {
      // No services node found, create one
      servicesNode = SPS.createNode();
      servicesNode.id = "SB:Services";
      servicesNode.className = 'folder services';
      servicesNode.name = SBString("servicesource.services");
      servicesNode.editable = false;
      servicesNode.setAttributeNS(SB_NS, "servicesFolder", 1);
      servicesNode.setAttributeNS(SP_NS, "Weight", 1);
      SPS.root.appendChild(servicesNode);
    }

    // Create New Releases node
    var newReleasesNode = SPS.createNode();
    newReleasesNode.id = "urn:newreleases";
    newReleasesNode.url = "chrome://newreleases/content/browse.xul";
    newReleasesNode.name = "&servicePane.Name";
    newReleasesNode.tooltip = "&servicePane.Tooltip";
    newReleasesNode.stringbundle = "chrome://newreleases/locale/overlay.properties";
    newReleasesNode.image = 'chrome://newreleases/skin/node-icon.png';
    newReleasesNode.editable = false;
    newReleasesNode.className = "newReleases";
    newReleasesNode.setAttributeNS(SP_NS, "addonID", "@EXTENSION_UUID@");
    servicesNode.appendChild(newReleasesNode);

    // may need to reset the name post-localisation
    this.updateNewReleasesCount();
  },

  // Find the Services node in the servicepane
  _findServicesNode : function (node, ns) {
    // Found the node, return it
    if (node.isContainer && (node.getAttributeNS(ns, "servicesFolder") == 1))
      return node;

    // Otherwise recursively walk this node's children
    if (node.isContainer) {
      var children = node.childNodes;
      while (children.hasMoreElements()) {
        var child = children.getNext().QueryInterface(Ci.sbIServicePaneNode);
        var result = this._findServicesNode(child, ns);
        if (result != null)
          return result;
      }
    }
    return null;
  },

  updateNewReleasesCount : function(num) {
    var newReleasesCount;
    var nrSvc = Cc["@songbirdnest.com/newreleases;1"]
                  .getService(Ci.nsIClassInfo).wrappedJSObject;
    var filter = Application.prefs.getValue(
        "extensions.newreleases.filterLibraryArtists", true);
    if (typeof(num) == "undefined") {
      newReleasesCount = nrSvc.getNewReleasesCount(filter);
    } else
      newReleasesCount = num;

    // Only update if the count has changed
    if (this.lastReleasesCount == newReleasesCount)
      return;
    this.lastReleasesCount = newReleasesCount;

    var SPS = Cc["@songbirdnest.com/servicepane/service;1"]
                .getService(Ci.sbIServicePaneService);
    var newReleasesNode = SPS.getNode("urn:newreleases");
    if (newReleasesNode) {
      Cu.import("resource://app/jsmodules/ServicePaneHelper.jsm");
      let badge = ServicePaneHelper.getBadge(newReleasesNode, "releaseCount");
      badge.label = newReleasesCount;
      badge.visible = true;
    }
  },


  /***********************************************************************
   * Routines for handling displaying the "New Release" status icon in the
   * faceplate, and handling the user clicking on it.
   **********************************************************************/
  // Setup the artist dataremote and the "New Release" status icon itself
  _setupArtistDataRemote : function() {
    // If we're in the miniplayer, then don't attach
    if (typeof(gBrowser) == "undefined")
      return;

    // Add the "New Release" status
    var artistBox;
    // gonzo faceplate rulez
    artistBox = document.getElementById("faceplate-tool-bar");
    // XXX rubberducky faceplate droolz
    if (artistBox == null)
      artistBox = document.getElementById("sb-faceplate-artist-box");
    // XXX anything else is pure shite
    if (artistBox == null)
      return;

    this._newReleaseIcon = document.createElement('image');
    this._newReleaseIcon.setAttribute("id", "faceplate-artist-release-icon");
    this._newReleaseIcon.setAttribute("src",
        "chrome://newreleases/skin/node-icon.png");
    this._newReleaseIcon.setAttribute("onmousedown",
        "NewReleases.loadArtist(event)");
    this._newReleaseIcon.setAttribute("mousethrough", "never");
    debugLog("setupArtistDataRemote", "Added click handler for faceplate");
    this._newReleaseIcon.style.visibility = "collapse";
    artistBox.insertBefore(this._newReleaseIcon, artistBox.firstChild);

    // Add the dataremote listener itself
    var createDataRemote = new Components.Constructor(
        "@songbirdnest.com/Songbird/DataRemote;1",
        Ci.sbIDataRemote, "init");
    NewReleases._artistDataRemote =
      createDataRemote("metadata.artist", null);
    NewReleases._artistDataRemote.bindObserver(this, true);

    // See if we're already playing (to catch the feather/layout switch)
    var currentItem;
    var playing = false;
    if (this.newMediaCore && (
      gMediaCore.status.state == Ci.sbIMediacoreStatus.STATUS_PLAYING ||
      gMediaCore.status.state == Ci.sbIMediacoreStatus.STATUS_BUFFERING ||
      gMediaCore.status.state == Ci.sbIMediacoreStatus.STATUS_PAUSED))
    {
      playing = true;
      currentItem = gMediaCore.sequencer.view.getItemByIndex(
        gMediaCore.sequencer.viewPosition);
    } else if (!this.newMediaCore && gMediaCore.playing) {
      playing = true;
      currentItem = gMediaCore.playingView.mediaList
          .getItemByGuid(gMediaCore.currentGUID);
    }

    if (playing && currentItem.getProperty(this.newReleaseImgProperty) != ""
        && currentItem.getProperty(this.newReleaseImgProperty) != null)
    {
      this._newReleaseIcon.style.visibility = "visible";
    }
  },

  // Our observer, we only use it for observing metadata.artist changes
  observe : function(aSubject, aTopic, aData) {
    if (aTopic == "metadata.artist" && aData != "") {
      var mainWin = Cc["@mozilla.org/appshell/window-mediator;1"]
                      .getService(Ci.nsIWindowMediator)
                      .getMostRecentWindow("Songbird:Main").window;
      var newRelease = this.nrSvc.getReleaseStatus(aData);
      if (newRelease)
        this._newReleaseIcon.style.visibility = "visible";
      else
        this._newReleaseIcon.style.visibility = "collapse";
    }
  },

  // The action that gets invoked when the user clicks on the New Release icon
  loadArtist : function(e) {
    // Prevent the highlight-current-item action from firing
    e.stopPropagation();

#ifdef METRICS_ENABLED
    gMetrics.metricsInc("newReleases", "faceplate.link", "");
#endif
    // Load the artist event page into a new tab
    var item;
    if (NewReleases.newMediaCore)
      item = gMediaCore.sequencer.view.getItemByIndex(
        gMediaCore.sequencer.viewPosition);
    else
      item = gMediaCore.playingView.mediaList.getItemByGuid(
        gMediaCore.currentGUID);
    var url = item.getProperty(this.newReleaseUrlProperty);
    if (!url) {
      // if the track lacks a new release property, then it's possible
      // it's from the web playlist.  we can make a best guess
      url = NewReleases.nrSvc.getArtistReleaseUrl(
        item.getProperty(SBProperties.artistName));
    }
    if (typeof(gBrowser) != "undefined") {
      // If we're in the main player, then open a tab
      gBrowser.loadOneTab(url);
    } else {
      // Otherwise open in the default browser
      SBOpenURLInDefaultBrowser(url);
    }
  },

  /***********************************************************************
   * Called when the user clicks the New Release icon in the library/playlist
   **********************************************************************/
  playlistCellClick : function(e) {
    var prop = e.getData("property");
    var item = e.getData("item");
    var nrSvc = Cc["@songbirdnest.com/newreleases;1"]
                  .getService(Ci.nsIClassInfo).wrappedJSObject;
    if (prop == nrSvc.newReleaseImgProperty) {
      var url = item.getProperty(nrSvc.newReleaseUrlProperty);
#ifdef METRICS_ENABLED
      gMetrics.metricsInc("newReleases", "library.link", "");
#endif
      gBrowser.loadOneTab(url);
    }
    e.stopPropagation();
  },

  /***********************************************************************
   * Create the smart playlist for tracks by artists new releases
   **********************************************************************/
  _getNewReleasePlaylist : function() {
    if (this.releasePlaylist != null)
      return this.releasePlaylist;

    try {
      var itemEnum = LibraryUtils.mainLibrary.getItemsByProperty(
          SBProperties.customType,
          "newreleases_artistsReleases").enumerate();
      while (itemEnum.hasMoreElements()) {
        debugLog("_getNewReleasePlaylist", "Smart playlist found");
        var list = itemEnum.getNext();
        this.releasePlaylist = list;
        return list;
      }
    } catch (e if e.result == Cr.NS_ERROR_NOT_AVAILABLE) {
    }

    debugLog("_getNewReleasePlaylist", "No smart playlist found");
    return null;
  },

  rebuildNewReleasePlaylist : function() {
    if (this.releasePlaylist != null) {
      debugLog("rebuildNewReleasePlaylist", "Smart playlist rebuilt");
      this.releasePlaylist.rebuild();
    } else {
      debugLog("rebuildNewReleasePlaylist", "Smart playlist is undefined");
    }
  },

  _setupNewReleasePlaylist : function() {
    // See if we already have a playlist first
    var pls = this._getNewReleasePlaylist();
    if (pls != null)
      return;

    // Now create our smart playlist
    var propMgr = Cc["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
                    .getService(Ci.sbIPropertyManager);
    var releasePI = propMgr.getPropertyInfo(this.newReleaseImgProperty);
    var op = releasePI.getOperator(releasePI.OPERATOR_ISSET);

    var list = LibraryUtils.mainLibrary.createMediaList("smart");
    list.matchType = Ci.sbILocalDatabaseSmartMediaList.MATCH_TYPE_ALL;
    list.limitType = Ci.sbILocalDatabaseSmartMediaList.LIMIT_TYPE_NONE;
    list.limit = 0;
    list.name = this._strings.getString("playlistName");
    list.appendCondition(this.newReleaseImgProperty, op, null, null, null);
    list.setProperty(SBProperties.customType, "newreleases_artistsReleases");
    list.setProperty(SBProperties.hidden, "0");
    list.autoUpdate = true;
    debugLog("_setupNewReleasePlaylist", "List properties set");
    SmartMediaListColumnSpecUpdater.update(list);
    debugLog("_setupNewReleasePlaylist", "List colspec updated");
    this.releasePlaylist = list;
    debugLog("_setupNewReleasePlaylist", "Smart playlist created");

    this.uninstallObserver.list = list;
  },

  /*********************************************************************
   * Setup listener for view changes so we can track the # of times the
   * Artists new releases smart playlist is played
   *********************************************************************/
  _mmListener: {
    onMediacoreEvent : function(ev) {
      switch (ev.type) {
        case Components.interfaces.sbIMediacoreEvent.VIEW_CHANGE:
          this.onViewChange(ev.data);
          break;
        default:
          break;
      }
    },
    onStop : function() { },
    onBeforeTrackChange : function() { },
    onTrackChange : function() { },
    onTrackIndexChange : function() { },
    onBeforeViewChange : function() { },
    onViewChange : function(aView) {
      debugLog("viewChangeListener", "on view change triggered");
      var releasePlaylist = null;
      try {
        var itemEnum = LibraryUtils.mainLibrary.getItemsByProperty(
            SBProperties.customType,
            "newreleases_artistsReleases").enumerate();
        while (itemEnum.hasMoreElements()) {
          releasePlaylist = itemEnum.getNext();
          break;
        }
      } catch (e if e.result == Cr.NS_ERROR_NOT_AVAILABLE) {
      }

      if (releasePlaylist == null)
        return;

      if (aView.mediaList.getProperty(SBProperties.outerGUID) ==
          releasePlaylist.guid)
      {
        debugLog("viewChangeListener",
          "Artists new release playback initiated");
#ifdef METRICS_ENABLED
        gMetrics.metricsInc("newReleases", "smartpls.played", "");
#endif
      }
    }
  },
}

NewReleases.uninstallObserver = {
  _uninstall : false,
  _disable : false,
  list : null,

  observe : function(subject, topic, data) {
    switch(topic) {
      case "em-action-requested":
        // Extension has been flagged to be uninstalled
        subject.QueryInterface(Ci.nsIUpdateItem);

        var SPS = Cc['@songbirdnest.com/servicepane/service;1']
                    .getService(Ci.sbIServicePaneService);
        var newReleasesNode = SPS.getNode("urn:newreleases");

        if (subject.id == "newreleases@songbirdnest.com") {
          if (data == "item-uninstalled") {
            this._uninstall = true;
          } else if (data == "item-disabled") {
            this._disable = true;
            newReleasesNode.hidden = true;
          } else if (data == "item-cancel-action") {
            if (this._uninstall)
              this._uninstall = false;
            if (this._disable)
              newReleasesNode.hidden = false;
          }
        }
        break;
      case "songbird-library-manager-before-shutdown":
        //debugLog("observe", "About to fire cleanupPlaylists()");
        if (this._uninstall) {
          this.cleanupPlaylists(data);
        }
        break;
      case "quit-application-granted":
        if (this._uninstall)
          this.uninstallCleanup();
        break;
    }
  },

  register : function() {
    var observerService = Cc["@mozilla.org/observer-service;1"]
                            .getService(Ci.nsIObserverService);
    observerService.addObserver(this, "em-action-requested", false);
    observerService.addObserver(this, "quit-application-granted", false);
    observerService.addObserver(this,
        "songbird-library-manager-before-shutdown", false);
    this.observerService = observerService;

    // Save a pointer to the main library
    this.mainLib = Cc['@songbirdnest.com/Songbird/library/Manager;1']
                     .getService(Ci.sbILibraryManager).mainLibrary;
  },

  unregister : function() {
    this.observerService.removeObserver(this, "em-action-requested");
    this.observerService.removeObserver(this, "quit-application-granted");
  },

  cleanupPlaylists : function(libraryManager) {
    this.observerService.removeObserver(this,
        "songbird-library-manager-before-shutdown");
    // 4) Remove the Artists New Release smart playlist
    if (this.list != null)
      this.mainLib.remove(this.list);
  },

  uninstallCleanup : function() {
    // Cleanup after ourselves
    // We need to do a few things:
    // 1) Remove service pane node for New Releases
    // 2) Remove New Releases prefs
    // 3) Remove "New Release" property from library if it's visible

#ifdef METRICS_ENABLED
    // Keep a count of when it was uninstalled
    gMetrics.metricsInc("newReleases", "uninstall", "");
#endif

    // 1) Remove service pane node
    var SPS = Cc['@songbirdnest.com/servicepane/service;1']
                .getService(Ci.sbIServicePaneService);
    var newReleasesNode = SPS.getNode("urn:newreleases");
    SPS.removeNode(newReleasesNode);

    // find the services node, if it has any visible children then leave
    // it visible - otherwise hide it
    var servicesNode = SPS.getNode("SB:Services");
    var visible = false;
    var enum = servicesNode.childNodes;
    while (enum.hasMoreElements()) {
      var node = enum.getNext();
      if (!node.hidden) {
        visible = true;
        break;
      }
    }
    servicesNode.hidden = !visible;

    // 2) Remove New Releases prefs
    var prefs = Cc["@mozilla.org/preferences-service;1"]
                  .getService(Ci.nsIPrefService)
                  .getBranch("extensions.newreleases.");
    if (prefs.prefHasUserValue("showplaylink"))
      prefs.clearUserPref("showplaylink");
    if (prefs.prefHasUserValue("showgcal"))
      prefs.clearUserPref("showgcal");
    if (prefs.prefHasUserValue("epic"))
      prefs.clearUserPref("epic");
    if (prefs.prefHasUserValue("lastupdated"))
      prefs.clearUserPref("lastupdated");
    if (prefs.prefHasUserValue("forcerefresh"))
      prefs.clearUserPref("forcerefresh");
    if (prefs.prefHasUserValue("citypage"))
      prefs.clearUserPref("citypage");
    if (prefs.prefHasUserValue("locations.lastupdated"))
      prefs.clearUserPref("locations.lastupdated");
    if (prefs.prefHasUserValue("locations.forcerefresh"))
      prefs.clearUserPref("locations.forcerefresh");
    prefs.deleteBranch("");

    // 3) Remove "New Release" property from library colspec
    var mainLib = Cc['@songbirdnest.com/Songbird/library/Manager;1']
                    .getService(Ci.sbILibraryManager).mainLibrary;
    var colSpec = mainLib.getProperty(SBProperties.columnSpec);
    var nrSvc = Cc["@songbirdnest.com/newreleases;1"]
                  .getService(Ci.nsIClassInfo).wrappedJSObject;
    var propRe = new RegExp("\\s+"+nrSvc.newReleaseImgProperty+" \\d+","g");
    if (colSpec.indexOf(nrSvc.newReleaseImgProperty)) {
      colSpec = colSpec.replace(propRe, "");
      mainLib.setProperty(SBProperties.columnSpec, colSpec);
    }
    var colSpec = mainLib.getProperty(SBProperties.defaultColumnSpec);
    if (colSpec.indexOf(nrSvc.newReleaseImgProperty)) {
      colSpec = colSpec.replace(propRe, "");
      mainLib.setProperty(SBProperties.defaultColumnSpec, colSpec);
    }
  },
}

window.addEventListener("load", function(e) { NewReleases.onLoad(e); }, false);
window.addEventListener("unload", function(e) { NewReleases.onUnLoad(e); }, false);
