<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->
<?xml-stylesheet href="chrome://songbird-dialogs/skin/subscribe.css" type="text/css"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<dialog
 xmlns:html="http://www.w3.org/1999/xhtml"
 xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 id="subscribe"
 title="&subscribe.title;"
 onload="doLoad();"
 flex="1"
 hidechrome="true"
 type="songbird"
 buttons="accept,cancel"
 ondialogaccept="if ( doOK() ) onExit( );"
 ondialogcancel="if ( doCancel() ) onExit( );"
>

  <windowregion/>

    <hbox align="center">
      <label  value="&subscribe.url;"/>
      <textbox  id="subscribe_url" />
    </hbox>
    <hbox  align="center">
    <spacer width="40"/>
    <label  id="auto_subscribe_label" value="&subscribe.autocheck;"/>
    <textbox  id="subscribe_interval" />
    <menulist id="subscribe_interval_unit" >
      <menupopup id="subscribe_interval_unit_popup">
        <menuitem id="subscribe_interval_days" label="&subscribe.days;" value="days"/>
        <menuitem id="subscribe_interval_hours" label="&subscribe.hours;" value="hours"/>
        <menuitem id="subscribe_interval_minutes" label="&subscribe.minutes;" value="minutes" />
      </menupopup>
    </menulist>
    </hbox>
    <label  value="&subscribe.destinationfolder;"/>
    <hbox>
      <textbox  id="subscribe_folder_path" flex="1"/>
      <button id="button_browse" label="&window.browse;"  oncommand="doBrowse();"/>
    </hbox>

  <!-- SCRIPTS -->
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js"/>
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/windowUtils.js" />
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />

  <script>
  <![CDATA[
const SB_NS = "http://songbirdnest.com/data/1.0#";
const SB_PROP_ISSUBSCRIPTION       = SB_NS + "isSubscription";
const SB_PROP_SUBSCRIPTIONURL      = SB_NS + "subscriptionURL";
const SB_PROP_SUBSCRIPTIONINTERVAL = SB_NS + "subscriptionInterval";
const SB_PROP_DESTINATION          = SB_NS + "destination"

var subscriptionCreated = false;

function getWindowArguments() {
  // First window argument is a sbIMediaList if we are updating an existing
  // list, otherwise it is null
  // Second window argument is the default url, or null for no default

  // This is stupid because depending on how the window was opened, the
  // arguments are sent differently.  If window.openDialog() was used, they
  // are unpacked into the window.arguments array.  If you use
  // nsIWindowWatcher::OpenWindow, you get a one item window.arguments array
  // with a nsIArray in it.

  var mediaList;
  var defaultUrl;

  if (window.arguments.length > 0) {
    var a = window.arguments[0];
    if (a instanceof Ci.nsIArray) {
      a = a.QueryInterface(Ci.nsIArray);
      if (a.length > 0) {
        try {
          mediaList = a.queryElementAt(0, Ci.sbIMediaList);
        }
        catch (e) {
        };
      }
      if (a.length > 1) {
        try {
          defaultUrl = a.queryElementAt(1, Ci.nsIURI).spec;
        }
        catch (e) {
        };
      }
    }
    else {
      var numargs = window.arguments.length;

      try {
        if (numargs > 0 && window.arguments[0])
          mediaList = window.arguments[0].QueryInterface(Ci.sbIMediaList);
      }
      catch(e) {
      }

      try {
        if (numargs > 1 && window.arguments[1]) {
          defaultUrl = window.arguments[1].QueryInterface(Ci.nsIURI).spec;
        }
      }
      catch(e) {
      }
    }
  }

  return { mediaList: mediaList, defaultUrl: defaultUrl};
}


function doLoad()
{

  var args = getWindowArguments();

  var srcURLTextbox  = document.getElementById("subscribe_url");
  var timeTextbox    = document.getElementById("subscribe_interval");
  var unitMenulist   = document.getElementById("subscribe_interval_unit");
  var destURLTextbox = document.getElementById("subscribe_folder_path");

  // If we get a medialist, read the existing settings from the list and
  // populate the interface
  if (args.mediaList) {
    var url = args.mediaList.getProperty(SB_PROP_SUBSCRIPTIONURL);
    if (url)
      srcURLTextbox.value = url;

    // Convert the inteval from seconds into something we can display.
    // Determine the units by the magnitude of the interval
    var time = args.mediaList.getProperty(SB_PROP_SUBSCRIPTIONINTERVAL);
    time = time / 60;
    var units = "minutes";
    if (time > 59) {
      if ( time % 60 == 0) {
        time = time / 60;
        units = "hours";
        if (time % 24 == 0) {
          time = time / 24;
          units = "days";
        }
      }
    }
    timeTextbox.value  = time;
    unitMenulist.value = units;

    var dest = args.mediaList.getProperty(SB_PROP_DESTINATION);
    if (dest) {
      // Convert the URL into a local path
      try {
        var ioService = Cc["@mozilla.org/network/io-service;1"]
                          .getService(Ci.nsIIOService);
        uri = ioService.newURI(dest, null, null);
        destURLTextbox.value = uri.QueryInterface(Ci.nsIFileURL).file.path
      }
      catch(e) {
        // url is not valid
      }
    }

  }
  else {
    // set defaults, sometimes we get an url
    srcURLTextbox.value = args.defaultUrl ? args.defaultUrl : "http://";
    timeTextbox.value = "1";
    unitMenulist.value = "days";
    
    var path = SBDataGetStringValue("download.music.folder");
    if (!path) {
      path = Cc["@songbirdnest.com/Songbird/DownloadDeviceHelper;1"].
             getService(Ci.sbIDownloadDeviceHelper).
             getDefaultDownloadFolder("audio").path;
    }
    destURLTextbox.value = path;
  }

  // focus the ok button by default
  document.documentElement.getButton("accept").focus();
}

function doOK()
{
  // Do nothing if subscription already created
  if (subscriptionCreated)
    return true;

  // Make sure the folder is valid
  var folder = document.getElementById("subscribe_folder_path").value;
  var localFile;
  
  var folderIsValid = false;
  if (folder != "")
  {
    localFile = Cc["@mozilla.org/file/local;1"]
                  .createInstance(Ci.nsILocalFile);
    try {
      localFile.initWithPath(folder);
      folderIsValid = localFile.isDirectory();
    }
    catch(e) {
      // folder is not valid
    }
  }

  if (!folderIsValid) {
    gPrompt.alert(window,
                  SBString("subscribe.selectvalidfolder.title",
                           "Invalid folder"),
                  SBString("subscribe.selectvalidfolder.msg",
                           "Please select a valid destination folder for download."));
    return false;
  }

  // Make sure the interval is a positive non-zero integer
  var interval = parseInt(document.getElementById("subscribe_interval").value, 10);
  if (isNaN(interval) || interval <= 0) {
    gPrompt.alert(window,
                  SBString("subscribe.selectvalidtime.title",
                           "Invalid Update Interval"),
                  SBString("subscribe.selectvalidtime.msg",
                           "Please select a valid time for automatic update."));
    return false;
  }

  // Convert the interval to seconds
  var unit = document.getElementById("subscribe_interval_unit").value;
  switch(unit) {
    case "days":    interval = interval * 24 * 60 * 60; break;
    case "hours":   interval = interval * 60 * 60; break;
    case "minutes": interval = interval * 60; break;
  }

  // Make sure the URL is valid
  var url = document.getElementById("subscribe_url").value;
  var uri;
  try {
    var ioService = Cc["@mozilla.org/network/io-service;1"]
                      .getService(Ci.nsIIOService);
    uri = ioService.newURI(url, null, null);
  }
  catch(e) {
    // url is not valid
  }

  // explicitly disallow "http://" as a valid URL
  if (url == "http://") {
    uri = null;
  }

  if (!uri) {
    // TODO: localize this
    gPrompt.alert(window,
                  SBString("subscribe.selectvalidurl.title",
                           "Invalid Update URL"),
                  SBString("subscribe.selectvalidurl.msg",
                           "Please select a valid URL for automatic update."));
    return false;
  }

  // Create the new list (if needed) and update the propertied
  var args = getWindowArguments();

  var mainLibrary = Cc["@songbirdnest.com/Songbird/library/Manager;1"]
                      .getService(Ci.sbILibraryManager).mainLibrary;
  var dps = Cc["@songbirdnest.com/Songbird/Library/DynamicPlaylistService;1"]
              .getService(Ci.sbIDynamicPlaylistService);
  if (!args.mediaList) {
    args.mediaList = dps.createList(mainLibrary, uri, interval, localFile);
    args.mediaList.name = getServer(uri);
#ifdef METRICS_ENABLED
    var metrics =
      Components.classes["@songbirdnest.com/Songbird/Metrics;1"]
                .createInstance(Components.interfaces.sbIMetrics);
    metrics.metricsInc("medialist", "create", "subscription");
#endif
  }
  else
    dps.updateList(args.mediaList, uri, interval, localFile);

  dps.updateNow(args.mediaList);

  // Indicate that the subscription has been created
  subscriptionCreated = true;

  return true;
}

function doCancel()
{
  return true;
}

function getServer(url)
{
  var host = url.host;
  var left = host.indexOf(".");
  var right = host.lastIndexOf(".");
  if (left != right)
    host = host.substr(left + 1, host.length);
  return host;
}

function doBrowse()
{
  var fp = Cc["@mozilla.org/filepicker;1"].createInstance(Ci.nsIFilePicker);
  fp.init( window, "", Ci.nsIFilePicker.modeGetFolder);
  var res = fp.show();
  if (res == Ci.nsIFilePicker.returnOK) {
    var dstURLTextbox = document.getElementById("subscribe_folder_path");
    dstURLTextbox.value = fp.file.path;
  }
}

]]>
  </script>
</dialog>
