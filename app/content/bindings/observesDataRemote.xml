<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE bindings SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  <!-- 
    DATAREMOTE OBSERVER
    
    A version of the "observes" tag that works with data remotes.
       
    Example:
    
    <button>
          <observes type="dataremote"
                    key="test.data" 
                    attribute="hidden" 
                    boolean="true"
                    inverted="true" />  
          <observes type="dataremote"
                    key="test.title" 
                    attribute="label" 
                    onchange="return value.toLowerCase();" />  
    </button>
    
    The onchange script becomes a function used to process
    the value before it is set as an attribute on the parent
    of the observes tag.  
    
    If the dataremote is a boolean, setting boolean="true"
    will cause "true" or "false" to be assigned to the 
    attribute on the parent.  If inverted="true" is also set
    then !value will be used.  These attributes are helpful
    as dataremotes currently store true/false as strings
    '1' and '0'.

    Changing the key/attribute/boolean/inverted values will 
    release and re-bind the dataremote to the new values.
    
    See also:
     * http://www.xulplanet.com/ndeakin/xul/specs/appstorage.html
     * http://www.xulplanet.com/tutorials/xultu/broadob.html
    -->
  <binding id="observes">

    <handlers>
      <handler event="DOMAttrModified" action="this.bind();"/>
    </handlers>
    
    <implementation type="application/x-javascript">

      <constructor>
        <![CDATA[      
        this.bind();
        ]]>
      </constructor>
      
      <destructor>
        <![CDATA[
        //dump("observes[type=dataremote]: DESTRUCTO " + this.getAttribute("key") +  "\n\n");
        this.unbind();
        ]]>
      </destructor>      
      
      <field name="_dataremote">null</field>
      <field name="_attribute">null</field>
      <field name="_processValue">null</field>
 
      <property name="key">
        <getter>
          <![CDATA[
          return this.getAttribute("key");
          ]]>
        </getter>
        <setter>
          <![CDATA[
          this.setAttribute("key", val);
          ]]>
        </setter>
      </property>
      
      <property name="attribute">
        <getter>
          <![CDATA[
          return this.getAttribute("attribute");
          ]]>
        </getter>
        <setter>
          <![CDATA[
          this.setAttribute("attribute", val);
          ]]>
        </setter>
      </property>
      
      <property name="boolean">
        <getter>
          <![CDATA[
          return this.getAttribute("boolean");
          ]]>
        </getter>
        <setter>
          <![CDATA[
          this.setAttribute("boolean", val);
          ]]>
        </setter>
      </property>
      
      <property name="inverted">
        <getter>
          <![CDATA[
          return this.getAttribute("inverted");
          ]]>
        </getter>
        <setter>
          <![CDATA[
          this.setAttribute("inverted", val);
          ]]>
        </setter>
      </property>
    
      <method name="unbind">
        <body>
          <![CDATA[
          // Release dataremote
          if (this._dataremote) {
            this._dataremote.unbind();
          }
          this._dataremote = null;
          this._processValue = null;
          this._attribute = "";
          ]]>
        </body>
      </method>  
      
      <method name="bind">
        <body>
          <![CDATA[
          this.unbind();
            
          //
          // Rebind
          var key = this.getAttribute("key");
          this._attribute = this.getAttribute("attribute");

          //dump("observes[type=dataremote]: CONSTRUCTO " + key +  "\n\n");
          
          if (key && this._attribute) {

            // Make a function to translate the dataremote value
            // before it gets assigned to the parent
            var onchange = this.getAttribute("onchange");            
            if (!onchange) {
              onchange = "return value;";
            }
            
            this._processValue = new Function("value", onchange);
              
            // Hook up for callbacks when the dataremote changes
            var newDataRemote = new Components.Constructor(
                  "@songbirdnest.com/Songbird/DataRemote;1", 
                  "sbIDataRemote", "init");
            this._dataremote = newDataRemote(key, null);
            var observer = this;
            this._dataremote.bindObserver(
              {
                observe: function(s,t,d) {
                  observer.onDataChanged();
                }
              }, false); 
          }
          ]]>
        </body>
      </method>  

      <method name="onDataChanged">
        <body>
          <![CDATA[  
          //dump("observes[type=dataremote]: CHANGEO " + this.getAttribute("key") +  "\n\n");
          
          var parent = this.parentNode;
          if (parent) {
            var value = this._dataremote.stringValue;
            if (this.getAttribute("boolean") == "true") {
              value = (value == "1");
              var isInverted = this.getAttribute("inverted") == "true";
              if (isInverted) {
                value = !value;
              }
            }
            value = this._processValue.apply(this, [value]);
            parent.setAttribute(this._attribute, value);
          }
          ]]>
        </body>
      </method>  


                            
    </implementation>
  </binding>  
  
</bindings>


