<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


 
  <binding id="smart-splitter" extends="xul:splitter">
  
  <implementation>

    <constructor>
      <![CDATA[
        this._threshold = parseInt(this.getAttribute("collapsethreshold"));
        if (this._threshold) {
          var elementId = this.getAttribute("collapseelement");
          this._collapseElement = document.getElementById(elementId);
        }

        this._destroyed = false;
        this.restoreLastState();
        this.setAttribute("mousethrough", "never");
        if (this.getAttribute("applydefault") == "true") {
          setTimeout(function(obj) { obj.applyDefault(); }, 0, this);
        } else {
          // We set the collapseonly lock in the applyDefault call if we need it there
          this._setCollapseOnly();          
        }
      ]]>
    </constructor>
    <destructor>
      if (this._destroyed) return;
      this.destroy();
    </destructor>
    
    <method name="destroy">
      <body>
        <![CDATA[
        if (!this._destroyed) {
          this.savePosition();
          this._destroyed = true;
        }
        ]]>
      </body>
    </method>

    <method name="onAttrModified">
      <parameter name="event"/>
      <body>
        <![CDATA[
          if (event.attrName == "state") {
            if (this._collapseElement) {
              var state = this.getAttribute("state");
              if (state == "collapsed")
                this._collapseElement.collapsed = true;
              else
                this._collapseElement.collapsed = false;
            } else {
              this.savePosition();
              this.saveState();
              this.doAutoShowHide();
            }
          }
        ]]>
      </body>
    </method>
    
    <method name="getResizeBefore">
      <body>
        <![CDATA[
          var keyword = this.getAttribute("resizebefore");
          if (keyword == "farthest") return this.walkNodes(this.parentNode.firstChild, 1);
          if (keyword == "closest") return this.walkNodes(this.previousSibling, -1);
          return null;
        ]]>
      </body>
    </method>
    
    <method name="getResizeAfter">
      <body>
        <![CDATA[
          var keyword = this.getAttribute("resizeafter");
          if (keyword == "farthest") return this.walkNodes(this.parentNode.lastChild, -1);
          if (keyword == "closest") return this.walkNodes(this.nextSibling, 1);
          return null;
        ]]>
      </body>
    </method>
    
    <!-- if the start node is not an element (could be a comment),
         continue searching for an element in the specified direction -->
    <method name="walkNodes">
      <parameter name="start"/>
      <parameter name="direction"/>
      <body>
        const ELEMENT_NODE = 1;
        var node = start;
        while (node) {
          if (node.nodeType == ELEMENT_NODE) return node;
          if (direction > 0) node = node.nextSibling;
          else node = node.previousSibling;
        }
        return null;
      </body>
    </method>
    
    <method name="onMouseEvent">
      <parameter name="event"/>
      <body>
        <![CDATA[
          // Auto-collapse logic.
          // Whenever the user initiates a drag ('mousedown' event)
          // we save the initial boxObject X position of the splitter
          // (captured by event.currentTarget).
          if (event.type == "mousedown") {
            this._initialX = parseInt(event.currentTarget.boxObject.x);
            this.toggled = false;
          }

          var state = this.getAttribute( "state" );
          this.savePosition();

          if (this._threshold && state == "dragging"
              && event && this._collapseElement)
          {
            // If the mouse X position is less than initialX position, and
            // the element-to-be-collapsed is still open, then do the
            // threshold calculation.  If we're past the threshold, then
            // collapse the element and set the initialX to be the minimum
            // width of the collapsed element.  (e.g. the last good X
            // position of the splitter just prior to collapsing
            if (event.clientX < this._initialX
                && !this._collapseElement.collapsed)
            {
              var minWidth =
                  getComputedStyle(this._collapseElement, "").minWidth;
              minWidth = parseInt(minWidth);
              var threshold = Math.min(minWidth, minWidth - this._threshold);
              if (event.clientX < threshold) {
                this._collapseElement.collapsed = true;
                this._initialX = minWidth;
                this.toggled = true;
              }
            }
            // Otherwise if the mouse X position is greater than the initialX
            // position and the element is collapsed, then do the threshold
            // calculation and expand the element.  Upon expanding, reset the
            // initialX position to be the threshold value.
            else if (event.clientX > this._initialX
                     && this._collapseElement.collapsed)
            {
              var threshold = this._initialX + this._threshold;
              if (event.clientX > threshold) {
                this._collapseElement.collapsed = false;
                this._initialX = this._threshold;
                this.toggled = true;
              }
            }

            var e = document.createEvent("Events");
            e.initEvent(state, false, true);
            this.dispatchEvent(e);

          } else if (!this._threshold) {
            this.doAutoShowHide(event);
          }

          // Only record state change on mouse up, rather than
          // on every mousemove
          if (event.type == "mouseup")
          {
            var id = this.getAttribute("stateid");
            if (!id || id == "") id = this.id;
            
            var root = "splitter." + id + ".";

            var collapsed = (state == "collapsed");

#ifdef METRICS_ENABLED
            var metricsid = this.getAttribute("metricsid");
            var metricscategory = this.getAttribute("metricscategory");
            if (metricsid && metricscategory ) {
              // if we are now collapsed, and we were not collapsed before,
              // increment the corresponding metrics key.
              if (collapsed && !SBDataGetBoolValue(root + "collapsed"))
                metrics_inc(metricscategory, metricsid, null);
            }
#endif

            this.saveState();
            
            // trigger an event (name of the event is the name of the state)
            // for custom handlers
            var e = document.createEvent("Events");
            e.initEvent(state, false, true);
            this.dispatchEvent(e);

            if (this.toggled) {
              if (this._collapseElement.collapsed) {
                this.setAttribute("state", "collapsed");
              } else {
                this.setAttribute("state", "open");
              }

              SBDataSetBoolValue(root + 'collapsed',
                                 this._collapseElement.collapsed);
              SBDataSetBoolValue(root + 'was_collapsed',
                                 !this._collapseElement.collapsed);
            }

            this.toggled = false;
          }
        ]]>
      </body>
    </method>
    
    <method name="savePosition">
      <body>
        <![CDATA[
          var id = this.getAttribute("stateid");
          if (!id || id == "") id = this.id;
          
          var root = "splitter." + id + ".";
          var resizebefore = this.getResizeBefore();
          if (resizebefore) {
            if (this.isVertical()) {
              if (resizebefore.height != "") {
                SBDataSetIntValue(root + "before.height", resizebefore.height);
              }
            } 
            else {
              if (resizebefore.width != "") {
                SBDataSetIntValue(root + "before.width", resizebefore.width);
              }
            }
          }
          var resizeafter = this.getResizeAfter();
          if (resizeafter) {
            if (this.isVertical()) {
              if (resizeafter.height != "") {
                SBDataSetIntValue(root + "after.height", resizeafter.height);
              }
            } 
            else {
              if (resizeafter.width != "") {
                SBDataSetIntValue(root + "after.width", resizeafter.width);
              }
            }
          }
        ]]>
      </body>
    </method>

    <method name="setBeforeHeight">
      <parameter name="aHeight"/>
      <body>
        <![CDATA[
          var resizeBefore = this.getResizeBefore();
          if (resizeBefore) {
            resizeBefore.height = aHeight;
          }
        ]]>
      </body>
    </method>

    <method name="setAfterHeight">
      <parameter name="aHeight"/>
      <body>
        <![CDATA[
          var resizeAfter = this.getResizeAfter();
          if (resizeAfter) {
            resizeAfter.height = aHeight;
          }
        ]]>
      </body>
    </method>
   
    <method name="setBeforeWidth">
      <parameter name="aWidth"/>
      <body>
        <![CDATA[
          var resizeBefore = this.getResizeBefore();
          if (resizeBefore) {
            resizeBefore.width = aWidth;
          }
        ]]>
      </body>
    </method>

    <method name="setAfterWidth">
      <parameter name="aWidth"/>
      <body>
        <![CDATA[
          var resizeAfter = this.getResizeAfter();
          if (resizeAfter) {
            resizeAfter.width = aWidth;
          }
        ]]>
      </body>
    </method>

    <method name="saveState">
      <!-- parameter name="override"/ -->
      <body>
        var state = this.getAttribute( "state" );
        var collapsed = (state == "collapsed");
        var id = this.getAttribute("stateid");
        if (!id || id == "") id = this.id;
        
        var root = "splitter." + id + ".";
        SBDataSetBoolValue( root + "collapsed", collapsed );
      </body>
    </method>

    <method name="applyDefault">
      <body>
        <![CDATA[
          var defaultbefore = -1;
          var defaultafter = -1;

          var id = this.getAttribute("stateid");
          if (!id || id == "") id = this.id;
          
          var root = "splitter." + id + ".";
          var resizebefore = this.getResizeBefore();
          if (resizebefore) {
            if (this.isVertical()) {
              if (resizebefore.height == 0 ||
                  resizebefore.height == "") 
                defaultbefore = resizebefore.boxObject.height;
            } else {
              if (resizebefore.width == 0 ||
                  resizebefore.width == "") 
                defaultbefore = resizebefore.boxObject.width;
            }
          }
          var resizeafter = this.getResizeAfter();
          if (resizeafter) {
            if (this.isVertical()) {
              if (resizeafter.height == 0 ||
                  resizeafter.height == "") 
                defaultafter = resizeafter.boxObject.height;
            } else {
              if (resizeafter.width == 0 ||
                  resizeafter.width == "") 
                defaultafter = resizeafter.boxObject.width;
            }
          }
          
          if (resizebefore && defaultbefore != -1) {
            if (this.isVertical()) resizebefore.height = defaultbefore;
            else resizebefore.width = defaultbefore;
          }
          if (resizeafter && defaultafter != -1) {
            if (this.isVertical()) resizeafter.height = defaultafter;
            else resizeafter.width = defaultafter;
          }

          this._setCollapseOnly();          
        ]]>
      </body>
    </method>

    <method name="_setCollapseOnly">
      <body>
        <![CDATA[
          if ( this.getAttribute( "collapseonly" ) == "true" ) {
            var direction = this.getAttribute("collapse");
            var obj;
            // Lock the collapsing side so its min and max dimensions are equal.
            switch (direction) {
              case "before":
                for ( obj = this.previousSibling; obj; obj = obj.previousSibling ) {
                  if (this.isVertical())
                    obj.maxHeight = obj.minHeight = obj.height;
                  else
                    obj.maxWidth = obj.minWidth = obj.width;
                }
                break;
              case "after":
                for ( obj = this.nextSibling; obj; obj = obj.nextSibling ) {
                  if (this.isVertical())
                    obj.maxHeight = obj.minHeight = obj.height;
                  else
                    obj.maxWidth = obj.minWidth = obj.width;
                }
                break;
            }
          }
          
        ]]>
      </body>
    </method>

    <method name="doAutoShowHide">
      <parameter name=""/>
      <body>
        <![CDATA[
          var state = this.getAttribute( "state" );
          switch (state) {
            case "open":
            case "dragging":
             var hideonopen = this.getAttribute("hideonopen");
              if (hideonopen != "") {
                var element = document.getElementById(hideonopen);
                if (element) element.collapsed = true;
              }
              var showonopen = this.getAttribute("showonopen");
              if (showonopen != "") {
                var element = document.getElementById(showonopen);
                if (element) element.collapsed = false;
              }
              break;
            case "collapsed":
              var hideoncollapse = this.getAttribute("hideoncollapse");
              if (hideoncollapse != "") {
                var element = document.getElementById(hideoncollapse);
                if (element) element.collapsed = true;
              }
              var showoncollapse = this.getAttribute("showoncollapse");
              if (showoncollapse != "") {
                var element = document.getElementById(showoncollapse);
                if (element) element.collapsed = false;
              }
              break;
          }
        ]]>
      </body>
    </method>

    <method name="restoreLastState">
      <parameter name="sizeonly"/>
      <body>
        <![CDATA[
          var id = this.getAttribute("stateid");
          if (!id || id == "") id = this.id;
          var root = "splitter." + id + ".";
          var resizebefore = this.getResizeBefore();
          if (resizebefore) {
            if (this.isVertical()) {
              var height = SBDataGetStringValue( root + "before.height" );
              if ( height != "" ) {
                resizebefore.height = height;
              }
            } else {
              var width = SBDataGetStringValue( root + "before.width" );
              if ( width != "" ) {
                resizebefore.width = width;
              }
            }
          }
          var resizeafter = this.getResizeAfter(true);
          if (resizeafter) {
            if (this.isVertical()) {
              var height = SBDataGetStringValue( root + "after.height" );
              if ( height != "" ) {
                resizeafter.height = height;
              }
            } else {
              var width = SBDataGetStringValue( root + "after.width" );
              if ( width != "" ) {
                resizeafter.width = width;
              }
            }
          }

          if (!sizeonly) {
            var state = SBDataGetStringValue( root + "collapsed" );
            if (state == "") {
              // no state set, use the attribute
              state = this.getAttribute("state");
            } else {
              // use the stored value
              state = SBDataGetBoolValue( root + "collapsed" ) ? "collapsed" : "open";
            }

            this.setAttribute( "state", state );
            this.doAutoShowHide();
          }
        ]]>
      </body>
    </method>

    <method name="isVertical">
      <body>
        <![CDATA[
          // The orient attribute is automatically set to 
          // "vertical" when the sb-smart-splitter is placed in 
          // a vbox
          var or = this.getAttribute("orient");
          if (or == "vert" || or == "vertical") return true;
          return false;
        ]]>
      </body>
    </method>

   </implementation>

   <handlers>
     <handler event="mousemove" action="this.onMouseEvent(event);"/>
     <handler event="mouseup" action="this.onMouseEvent(event);"/>
     <handler event="mousedown" action="this.onMouseEvent(event);"/>
     <handler event="DOMAttrModified" action="this.onAttrModified(event);"/>
   </handlers>
 
  </binding>

</bindings>
