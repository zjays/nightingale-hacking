<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <!--
    Songbird play queue playlist widget

    This binding extends the playlist binding to provide methods and event
    handlers that are unique to the play queue playlist.
  -->
  <binding id="playqueue-playlist"
           extends="chrome://songbird/content/bindings/playlist.xml#playlist">

    <implementation>

      <constructor>
        <![CDATA[
          this._queueListDestroyed = false;
          var self = this;
          this._playQueueService =
              this._Cc["@songbirdnest.com/Songbird/playqueue/service;1"]
                      .getService(this._Ci.sbIPlayQueueService);

          this._playQueueServiceListener = {
            onIndexUpdated: function(aToIndex) {},

            onQueueOperationStarted: function() {
              self.disableDrop = true;
            },

            onQueueOperationCompleted: function(aCount) {
              self.disableDrop = false;
            }
          };
          this._playQueueService.addListener(this._playQueueServiceListener);
        ]]>
      </constructor>

      <destructor>
        if (this._queueListDestroyed) return;
        this._playQueueService.removeListener(this._playQueueServiceListener);
        this._playQueueServiceListener = null;
        this._playQueueService = null;
        this._queueListDestroyed = true;
      </destructor>

      <method name="acceptDropSource">
        <parameter name = "aMediaList"/>
        <body>
          <![CDATA[
            // The play queue does not accept drops from devices. Our device
            // sync logic depends on funneling device transfers through the
            // main library, so product decided to disable direct transfers
            // from devices to the play queue.
            var deviceManager =
                this._Cc["@songbirdnest.com/Songbird/DeviceManager;2"]
                        .getService(this._Ci.sbIDeviceManager2);
            var sourceDevice = deviceManager.getDeviceForItem(aMediaList);

            return sourceDevice ? false : true;
          ]]>
        </body>
      </method>

      <method name="_dropOnTree">
        <parameter name="aIndex"/>
        <parameter name = "aOrientation"/>
        <parameter name = "aSession"/>
        <body>
          <![CDATA[

            // If possible, take advantage of an asynchronous queueing method.
            // We currently only have async methods for enumerators of items.
            // If we can't support the drop with an async method, pass the call
            // up to the parent playlist binding for synchronous addition.

            var dnd = this._Cc["@songbirdnest.com/Songbird/DndSourceTracker;1"]
                              .getService(this._Ci.sbIDndSourceTracker);
            var data = DNDUtils.getTransferDataForFlavour(
                         this._TYPE_X_SB_TRANSFER_MEDIA_ITEMS,
                         this._dragSession);
            if (data) {
              var context = dnd.getSourceSupports(data);
              if (context instanceof this._Ci.sbIMediaItemsTransferContext) {
                var row = this._getRowToInsert(this.mediaListView,
                                               aIndex,
                                               aOrientation);
                if (row < 0 || row >= this.mediaList.length) {
                  this._playQueueService.queueSomeLast(context.items);
                } else {
                  this._playQueueService.queueSomeBefore(row, context.items);
                }
                if(this._Ci.nsIDragService.DRAGDROP_ACTION_MOVE == aSession.dragAction &&
                   context.source == this.mediaListView.mediaList) {
                  this.mediaListView.removeSelectedMediaItems();
                }
                return;
              }
            }

            // We don't have an async method to handle the drop, so call up to
            // the parent binding (playlist.xml). We can't do this directly in
            // XBL (see https://bugzilla.mozilla.org/show_bug.cgi?id=373652),
            // but we can get to it through the prototype chain.
            this.__proto__
                .__proto__
                ._dropOnTree
                .call(this, aIndex, aOrientation, aSession);

          ]]>
        </body>
      </method>

      <!--
        Invalidate the row that contains the play queue's current track. This
        causes the row to be repainted.
      -->
      <method name="_invalidateCurrentRow">
        <body>
          <![CDATA[
            this.tree.treeBoxObject.invalidateRow(this._playQueueService.index);
          ]]>
        </body>
      </method>

      <method name="_addItemsAsync">
        <parameter name="mediaList"/>
        <parameter name="enumerator"/>
        <parameter name="doInsert"/>
        <parameter name="row"/>
        <body>
          <![CDATA[
            if (doInsert) {
              this._playQueueService.queueSomeBefore(row, enumerator);
            } else {
              this._playQueueService.queueSomeLast(enumerator);
            }
          ]]>
        </body>
      </method>
    </implementation>

    <handlers>

      <!--
        Handle focus and blur events so that the row containing the current
        track can be invalidated and redrawn. This is required because the
        styling of this row is dependent on focus state.
      -->
      <handler event="focus">
        <![CDATA[
          this._invalidateCurrentRow();
        ]]>
      </handler>
      <handler event="blur">
        <![CDATA[
          this._invalidateCurrentRow();
        ]]>
      </handler>
    </handlers>
  </binding>
</bindings>

