<?xml version="1.0"?>
<!-- vim: set sw=2 : -->
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE bindings SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
  
  <binding 
    id="eq-band-slider" 
    extends="chrome://songbird/content/bindings/progressSlider.xml#progress-slider" 
    orient="vertical">

    <handlers>
      <handler event="progressSliderChange" action="this.onTrackGain();"/>
      <handler event="progressSliderRelease" action="this.onReleaseGain();"/>
    </handlers>

  <implementation>
    <field name="band">0</field>
    <field name="onchange">null</field>

    <constructor>
      <![CDATA[
        this.className += " sb-eq-band-slider";
        this.bandIndex = this.getAttribute('band');

        this.mm = 
          Components.classes["@songbirdnest.com/Songbird/Mediacore/Manager;1"]
                    .getService(Components.interfaces.sbIMediacoreManager);

        // data remotes
        const on_remote_gain_change = { 
          _that: this, 
          observe: function bandSlider_onChange( aSubject, aTopic, aData ) {
            this._that.onRemoteGainChange();
          } 
        };
        this.remote_gain = SB_NewDataRemote( "eq.band." + this.bandIndex, null );
        this.remote_gain.bindObserver(on_remote_gain_change, true);

        this.remote_lastGain = SB_NewDataRemote("eq.band." + this.bandIndex + ".last", null );
        
        this.sliderScale = 20000;
        this.sliderZero  = this.sliderScale / 2;
        
        this.maxpos = this.sliderScale;
        this.value = this._scaleSliderValue(this.remote_gain.stringValue);
        this.trackingGain = false;
        
        // initialize lastGain if it wasn't set
        if (this.remote_lastGain.stringValue == "" ||
            this.remote_lastGain.stringValue == "NaN") {
          this.lastGain = this.value;
        }
  	  
        this.band = this.mm.equalizer.getBand(this.bandIndex);
      ]]>
    </constructor>
    <destructor>
      <![CDATA[
        if (this.remote_gain) {
          this.remote_gain.unbind();
          this.remote_gain = null;
        }
        if (this.remote_lastGain) {
          this.remote_lastGain.unbind();
          this.remote_lastGain = null;
        }
        
        this.band = null;
        this.mm = null;
      ]]>
    </destructor>
    
    <method name="onTrackGain">
      <body>
        <![CDATA[
          if (isNaN(this.value)) return;

          this.trackingGain = true;

          this.band.gain = this._scaleValue(this.value);
          this.mm.equalizer.setBand(this.band);
          
          this.remote_gain.stringValue = this.band.gain;

          //BUG #240 - Adding a callback so the UI can update
          if (this.onchange != null) 
            this.onchange(this.bandIndex);

        ]]>
      </body>
    </method>

    <method name="onReleaseGain">
      <body>
        <![CDATA[
          this.trackingGain = false;
        ]]>
      </body>
    </method>

    <method name="onRemoteGainChange">
      <body>
        <![CDATA[
          try {
            this.value = this._scaleSliderValue(this.remote_gain.stringValue);
          } catch (err) {
            dump("bandSlider.xml - onRemoteGainChange - " + err + "\n");
          }
          if (this.onchange != null) 
            this.onchange(this.bandIndex);
        ]]>
      </body>
    </method>

    <method name="_scaleValue">
      <parameter name="aValue"/>
      <body>
        <![CDATA[
          return ((aValue - this.sliderZero) / this.sliderZero) * -1.0;
        ]]>
      </body>
    </method>

    <method name="_scaleSliderValue">
      <parameter name="aValue"/>
      <body>
        <![CDATA[
          return (parseFloat(aValue) * -1.0 * this.sliderZero) + this.sliderZero;
        ]]>
      </body>
    </method>

    <!-- override the values in the progress slider to make it track the gain -->
    <property name="lastGain">
      <getter>
        return this._scaleSliderValue(this.remote_lastGain.stringValue);
      </getter>
      <setter>
        this.remote_lastGain.stringValue = this._scaleValue(val);
      </setter>
    </property>

   </implementation>
 
  </binding>

</bindings>